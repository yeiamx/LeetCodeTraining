解题思路：
汽车行驶的过程就是遍历所有加油站，在每个加油站i吸收gas[i]，然后耗cost[i]的过程。
若在某个加油站cur_energy + (gas[i] - cost[i]) < 0 就寄了
既然在每个加油站吸收gas[i]，然后耗cost[i]是同步的，我们不妨将它们看作一个数组energy
然后题目过程则变为观察每个加油站的 cur_energy + energy[i]的情况

由于需要以环形式遍历，我们不妨复制一份energy数组
例：n = 5
1 10 -3 4 5 1 10 -3 4 5
0 1  2  3 4 5 6  7  8 9
这样问题就变为了在这个数组上找[l..r](0 < l < n)， r-l+1 = n（即长度为n）的子数组
使得sum[l..l] >= 0; sum[l..l+1] >= 0; ... sum[l..r-1] >= 0; sum[l..r] >= 0
这样从l到r完成了环绕一周，且都能一步步依靠energy到达的情况

这个数组不用真的在物理上扩容，下标大于5时直接%5即可.

推理过程：
讨论以L出发能否得到题解。
if L = l
1.首先按照上述逻辑，若能推理到sum[l..r] >= 0，那皆大欢喜，直接返回答案。

2.若不能，则一定是sum[l..k-1] >= 0; sum[l..k] < 0; 此时有个结论:L等于[l..k]时必不能构造出题解
首先nums[k] < 0 ,L肯定不能等于k,刚出发就寄了.
if L = l' in [l..k-1]
则sum[l..l'] + sum[l'..k] = sum[l..k-1] + nums[k] < 0, 且sum[l..l'] >= 0
即sum[l'..k] < 0, 从l'出发,在k时寄了,不符合题意.

所以此时l = k + 1, 然后继续推理即可.


